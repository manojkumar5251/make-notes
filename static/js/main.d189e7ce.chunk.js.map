{"version":3,"sources":["components/TitleList/index.js","components/NotesView/index.js","App.js","serviceWorker.js","index.js"],"names":["TitleList","props","React","useState","options","setOptions","data","setData","useEffect","notes","forEach","item","title","push","value","Fragment","style","display","alignItems","padding","onChange","width","onSelect","onClick","findIndex","val","filterOption","inputValue","option","toUpperCase","indexOf","size","prefix","SearchOutlined","borderRadius","addNewNote","type","marginLeft","icon","PlusOutlined","fontSize","color","map","i","key","cursor","margin","textAlign","fontWeight","a","b","millisecs","Date","days","parseInt","toFixed","hours","mins","timeCalc","createdAt","NotesView","height","note","onTitleChange","placeholder","bordered","overflowY","TextArea","description","onDescriptionChange","App","index","setIndex","setNotes","localStorage","getItem","saveNotes","notesCopy","length","JSON","parse","sort","updatedAt","setItem","stringify","border","md","date","_id","now","target","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d189e7ce.chunk.js","sourcesContent":["import React from \"react\"\nimport { Input, Button, Divider, AutoComplete } from \"antd\"\nimport { SearchOutlined, PlusOutlined } from \"@ant-design/icons\"\n\nconst TitleList = props => {\n  const [options, setOptions] = React.useState([])\n  const [data, setData] = React.useState(\"\")\n\n  React.useEffect(() => {\n    let notes = []\n    props.notes.forEach(item => {\n      item.title !== \"\" && notes.push({ value: item.title })\n    })\n    setOptions(notes)\n  }, [props.notes])\n\n  const onSelect = data => {\n    props.onClick(options.findIndex(val => val.value === data))\n    setData(\"\")\n  }\n\n  const timeCalc = (a, b) => {\n    let millisecs = a - new Date(b)\n    let days = parseInt((millisecs / (1000 * 60 * 60 * 24)).toFixed(0))\n    let hours = parseInt((millisecs / (1000 * 60 * 60)).toFixed(0))\n    let mins = parseInt((millisecs / (1000 * 60)).toFixed(0))\n\n    if (days !== 0) {\n      millisecs = days + (days === 1 ? \" day\" : \" days\")\n    } else if (hours !== 0) {\n      millisecs = hours + (hours === 1 ? \" hour\" : \" hours\")\n    } else if (mins !== 0) {\n      millisecs = mins + (mins ? \" min\" : \" mins\")\n    } else millisecs = \"moments\"\n\n    return millisecs\n  }\n\n  return (\n    <React.Fragment>\n      <div\n        style={{ display: \"flex\", alignItems: \"center\", padding: \"5px 0.5rem\" }}\n      >\n        <AutoComplete\n          value={data}\n          onChange={setData}\n          style={{ width: \"100%\" }}\n          options={options}\n          onSelect={onSelect}\n          filterOption={(inputValue, option) =>\n            option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n          }\n        >\n          <Input\n            size=\"large\"\n            prefix={<SearchOutlined />}\n            style={{ borderRadius: \"50px\" }}\n          />\n        </AutoComplete>\n\n        <Button\n          onClick={props.addNewNote}\n          type=\"link\"\n          style={{ marginLeft: \"0.5rem\" }}\n          icon={\n            <PlusOutlined style={{ fontSize: \"1.5rem\", color: \"#7dacd6\" }} />\n          }\n        />\n      </div>\n\n      {props.notes.map((item, i) => {\n        return (\n          <div key={i}>\n            <div\n              style={{ padding: \"0rem 1rem\", cursor: \"pointer\" }}\n              onClick={() => props.onClick(i)}\n            >\n              <h2 style={{ margin: \"0rem\" }}>{item.title}</h2>\n              <h5\n                style={{\n                  margin: \"0rem\",\n                  textAlign: \"right\",\n                  fontWeight: \"bold\",\n                  color: \"#999\"\n                }}\n              >\n                {\"Created \" + timeCalc(new Date(), item.createdAt) + \" ago\"}\n              </h5>\n            </div>\n            <Divider style={{ margin: \"0.5rem 0rem\" }} />\n          </div>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default TitleList\n","import React from \"react\"\nimport { Input, Divider } from \"antd\"\n\nconst NotesView = props => {\n  return (\n    <div style={{ height: \"100%\" }}>\n      <Input\n        value={props.note.title}\n        onChange={props.onTitleChange}\n        placeholder=\"Type your title here\"\n        bordered={false}\n        style={{ fontSize: \"24px\" }}\n      />\n      <Divider style={{ margin: \"0.1rem 0rem\" }} />\n      <div style={{ overflowY: \"auto\", height: \"92.5%\" }}>\n        <Input.TextArea\n          value={props.note.description}\n          onChange={props.onDescriptionChange}\n          placeholder=\"Type your notes here\"\n          style={{ height: \"100%\" }}\n          bordered={false}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default NotesView\n","import React from \"react\"\nimport { Row, Col } from \"antd\"\nimport TitleList from \"./components/TitleList\"\nimport NotesView from \"./components/NotesView\"\n\nconst App = () => {\n  const [index, setIndex] = React.useState(null)\n  const [notes, setNotes] = React.useState([])\n\n  React.useEffect(() => {\n    localStorage.getItem(\"notes\") === null && saveNotes([])\n  }, [])\n\n  React.useEffect(() => {\n    let notesCopy = notes.length\n      ? notes\n      : JSON.parse(localStorage.getItem(\"notes\"))\n\n    notesCopy = notesCopy.sort(\n      (a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)\n    )\n\n    saveNotes(notesCopy)\n    setIndex(0)\n  }, [notes])\n\n  const saveNotes = data => {\n    setNotes(data)\n    localStorage.setItem(\"notes\", JSON.stringify(data))\n  }\n\n  const onDescriptionChange = note => {\n    let notesCopy = [...notes]\n    notesCopy[index].description = note.target.value\n    notesCopy[index].updatedAt = JSON.parse(JSON.stringify(new Date()))\n    saveNotes(notesCopy)\n  }\n\n  const onTitleChange = note => {\n    let notesCopy = [...notes]\n    notesCopy[index].title = note.target.value\n    notesCopy[index].updatedAt = JSON.parse(JSON.stringify(new Date()))\n    saveNotes(notesCopy)\n  }\n\n  const addNewNote = () => {\n    if (notes.length && notes[0][\"title\"] === \"\") {\n      return\n    }\n    let date = new Date()\n    saveNotes([\n      {\n        _id: Date.now(),\n        title: \"\",\n        description: \"\",\n        createdAt: date,\n        updatedAt: date\n      },\n      ...notes\n    ])\n    setIndex(0)\n  }\n\n  return (\n    <Row style={{ height: \"100vh\", overflowY: \"hidden\" }}>\n      <Col style={{ border: \"1px solid #555\" }} md={6}>\n        <TitleList\n          notes={notes}\n          onClick={i => setIndex(i)}\n          addNewNote={addNewNote}\n        />\n      </Col>\n\n      <Col style={{ border: \"1px solid #555\" }} md={18}>\n        {index !== null && notes.length ? (\n          <NotesView\n            note={notes[index]}\n            onTitleChange={onTitleChange}\n            onDescriptionChange={onDescriptionChange}\n          />\n        ) : (\n          <div\n            style={{\n              textAlign: \"center\",\n              marginTop: \"10rem\"\n            }}\n          >\n            Create notes by clicking\n            <span\n              style={{\n                marginLeft: \"10px\",\n                fontSize: \"1.5rem\"\n              }}\n            >\n              +\n            </span>\n            <br />\n            or <br />\n            Click on any title to view or edit them.\n          </div>\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"antd/dist/antd.css\"\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}